# coding: utf-8

"""
    College Football Data API

    This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.  # noqa: E501

    OpenAPI spec version: 4.5.2
    Contact: admin@collegefootballdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cfbd.configuration import Configuration


class TeamFPIRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'team': 'str',
        'conference': 'str',
        'fpi': 'float',
        'resume_ranks': 'TeamFPIRatingResumeRanks',
        'efficiencies': 'TeamFPIRatingEfficiencies'
    }

    attribute_map = {
        'year': 'year',
        'team': 'team',
        'conference': 'conference',
        'fpi': 'fpi',
        'resume_ranks': 'resumeRanks',
        'efficiencies': 'efficiencies'
    }

    def __init__(self, year=None, team=None, conference=None, fpi=None, resume_ranks=None, efficiencies=None, _configuration=None):  # noqa: E501
        """TeamFPIRating - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._year = None
        self._team = None
        self._conference = None
        self._fpi = None
        self._resume_ranks = None
        self._efficiencies = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if team is not None:
            self.team = team
        if conference is not None:
            self.conference = conference
        if fpi is not None:
            self.fpi = fpi
        if resume_ranks is not None:
            self.resume_ranks = resume_ranks
        if efficiencies is not None:
            self.efficiencies = efficiencies

    @property
    def year(self):
        """Gets the year of this TeamFPIRating.  # noqa: E501


        :return: The year of this TeamFPIRating.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this TeamFPIRating.


        :param year: The year of this TeamFPIRating.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def team(self):
        """Gets the team of this TeamFPIRating.  # noqa: E501


        :return: The team of this TeamFPIRating.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamFPIRating.


        :param team: The team of this TeamFPIRating.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def conference(self):
        """Gets the conference of this TeamFPIRating.  # noqa: E501


        :return: The conference of this TeamFPIRating.  # noqa: E501
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamFPIRating.


        :param conference: The conference of this TeamFPIRating.  # noqa: E501
        :type: str
        """

        self._conference = conference

    @property
    def fpi(self):
        """Gets the fpi of this TeamFPIRating.  # noqa: E501


        :return: The fpi of this TeamFPIRating.  # noqa: E501
        :rtype: float
        """
        return self._fpi

    @fpi.setter
    def fpi(self, fpi):
        """Sets the fpi of this TeamFPIRating.


        :param fpi: The fpi of this TeamFPIRating.  # noqa: E501
        :type: float
        """

        self._fpi = fpi

    @property
    def resume_ranks(self):
        """Gets the resume_ranks of this TeamFPIRating.  # noqa: E501


        :return: The resume_ranks of this TeamFPIRating.  # noqa: E501
        :rtype: TeamFPIRatingResumeRanks
        """
        return self._resume_ranks

    @resume_ranks.setter
    def resume_ranks(self, resume_ranks):
        """Sets the resume_ranks of this TeamFPIRating.


        :param resume_ranks: The resume_ranks of this TeamFPIRating.  # noqa: E501
        :type: TeamFPIRatingResumeRanks
        """

        self._resume_ranks = resume_ranks

    @property
    def efficiencies(self):
        """Gets the efficiencies of this TeamFPIRating.  # noqa: E501


        :return: The efficiencies of this TeamFPIRating.  # noqa: E501
        :rtype: TeamFPIRatingEfficiencies
        """
        return self._efficiencies

    @efficiencies.setter
    def efficiencies(self, efficiencies):
        """Sets the efficiencies of this TeamFPIRating.


        :param efficiencies: The efficiencies of this TeamFPIRating.  # noqa: E501
        :type: TeamFPIRatingEfficiencies
        """

        self._efficiencies = efficiencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamFPIRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamFPIRating):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamFPIRating):
            return True

        return self.to_dict() != other.to_dict()
