# coding: utf-8

"""
    College Football Data API

    This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.  # noqa: E501

    OpenAPI spec version: 4.5.2
    Contact: admin@collegefootballdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cfbd.configuration import Configuration


class TeamFPIRatingResumeRanks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strength_of_record': 'int',
        'fpi': 'int',
        'average_win_probability': 'int',
        'strength_of_schedule': 'int',
        'remaining_strength_of_schedule': 'int',
        'game_control': 'int'
    }

    attribute_map = {
        'strength_of_record': 'strengthOfRecord',
        'fpi': 'fpi',
        'average_win_probability': 'averageWinProbability',
        'strength_of_schedule': 'strengthOfSchedule',
        'remaining_strength_of_schedule': 'remainingStrengthOfSchedule',
        'game_control': 'gameControl'
    }

    def __init__(self, strength_of_record=None, fpi=None, average_win_probability=None, strength_of_schedule=None, remaining_strength_of_schedule=None, game_control=None, _configuration=None):  # noqa: E501
        """TeamFPIRatingResumeRanks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._strength_of_record = None
        self._fpi = None
        self._average_win_probability = None
        self._strength_of_schedule = None
        self._remaining_strength_of_schedule = None
        self._game_control = None
        self.discriminator = None

        if strength_of_record is not None:
            self.strength_of_record = strength_of_record
        if fpi is not None:
            self.fpi = fpi
        if average_win_probability is not None:
            self.average_win_probability = average_win_probability
        if strength_of_schedule is not None:
            self.strength_of_schedule = strength_of_schedule
        if remaining_strength_of_schedule is not None:
            self.remaining_strength_of_schedule = remaining_strength_of_schedule
        if game_control is not None:
            self.game_control = game_control

    @property
    def strength_of_record(self):
        """Gets the strength_of_record of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The strength_of_record of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._strength_of_record

    @strength_of_record.setter
    def strength_of_record(self, strength_of_record):
        """Sets the strength_of_record of this TeamFPIRatingResumeRanks.


        :param strength_of_record: The strength_of_record of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._strength_of_record = strength_of_record

    @property
    def fpi(self):
        """Gets the fpi of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The fpi of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._fpi

    @fpi.setter
    def fpi(self, fpi):
        """Sets the fpi of this TeamFPIRatingResumeRanks.


        :param fpi: The fpi of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._fpi = fpi

    @property
    def average_win_probability(self):
        """Gets the average_win_probability of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The average_win_probability of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._average_win_probability

    @average_win_probability.setter
    def average_win_probability(self, average_win_probability):
        """Sets the average_win_probability of this TeamFPIRatingResumeRanks.


        :param average_win_probability: The average_win_probability of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._average_win_probability = average_win_probability

    @property
    def strength_of_schedule(self):
        """Gets the strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._strength_of_schedule

    @strength_of_schedule.setter
    def strength_of_schedule(self, strength_of_schedule):
        """Sets the strength_of_schedule of this TeamFPIRatingResumeRanks.


        :param strength_of_schedule: The strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._strength_of_schedule = strength_of_schedule

    @property
    def remaining_strength_of_schedule(self):
        """Gets the remaining_strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The remaining_strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._remaining_strength_of_schedule

    @remaining_strength_of_schedule.setter
    def remaining_strength_of_schedule(self, remaining_strength_of_schedule):
        """Sets the remaining_strength_of_schedule of this TeamFPIRatingResumeRanks.


        :param remaining_strength_of_schedule: The remaining_strength_of_schedule of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._remaining_strength_of_schedule = remaining_strength_of_schedule

    @property
    def game_control(self):
        """Gets the game_control of this TeamFPIRatingResumeRanks.  # noqa: E501


        :return: The game_control of this TeamFPIRatingResumeRanks.  # noqa: E501
        :rtype: int
        """
        return self._game_control

    @game_control.setter
    def game_control(self, game_control):
        """Sets the game_control of this TeamFPIRatingResumeRanks.


        :param game_control: The game_control of this TeamFPIRatingResumeRanks.  # noqa: E501
        :type: int
        """

        self._game_control = game_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamFPIRatingResumeRanks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamFPIRatingResumeRanks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamFPIRatingResumeRanks):
            return True

        return self.to_dict() != other.to_dict()
